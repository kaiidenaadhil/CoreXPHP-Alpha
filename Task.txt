Prompt to Create Admin Panel Features:

        "Create an admin panel for managing products with the following features:

        Single View PDF Export: Implement a button to export the details of a single product to a PDF. Include key product information such as name, description, price, stock, category, SKU, and product image. Use a PDF generation library (e.g., jsPDF for front-end or FPDF for back-end).

        Bulk Import: Create a bulk import form where admin users can upload a CSV or Excel file to import product data. Each row should contain product details such as name, description, price, stock, category, etc.

        Export as CSV: Add an "Export as CSV" button that exports all product data into a downloadable CSV file. The CSV should include product details such as name, SKU, price, category, stock status, etc.

        Bulk Delete: Implement checkboxes next to each product in the product list, allowing the admin to select multiple products for deletion. Once selected, the admin can click a 'Bulk Delete' button to remove the selected products from the database.

        Search: Add a search bar at the top of the product list where the admin can search for products by name, SKU, or other attributes. The results should update dynamically as the admin types.

        Sort: Implement a dropdown to sort products by various attributes, such as name (A-Z, Z-A), price (Low to High, High to Low), and stock status. Update the product list according to the selected sorting option.

        Filter: Implement filter options for products, allowing the admin to filter by category, stock status (In Stock/Out of Stock), price range (min/max), etc. The product list should update based on the selected filters.

        Single Operation Edit: Allow the admin to edit a product by clicking an "Edit" button next to each product in the list. Clicking this button should redirect to an editable form with pre-filled values for the product’s attributes (name, description, price, etc.). After editing, the admin can save the changes.

        Single Operation Delete: Allow the admin to delete a product with a "Delete" button next to each product. When clicked, a confirmation prompt should appear to confirm deletion. After confirmation, the product should be removed from the database.

        Single Operation View: Include a "View" button next to each product. When clicked, it should display a detailed view of the product, showing all product information like name, description, price, stock, SKU, category, and product image. The admin should be able to close this view or navigate back to the product list.


Make Auto Created MVC from ~ dev with newly added functionalities .


1. Check relationship and 

2 .Check pagination, Short , Filter etc

                Here is a categorized list of all the major clauses and methods from your QueryBuilder and Model classes, along with their test status:

                ✅ Filter Clauses
                where,orWhere,whereIn,whereNotIn,whereBetween,whereNotBetween

                whereNull,whereNotNull,whereRaw

                ✅ Join Clauses
                join

                ✅ Group Clauses
                groupBy,having

                ✅ Ordering Clauses
                orderBy

                ✅ Pagination
                paginate,limit,offset

                ✅ Selection
                select,get,first

                ✅ Aggregation
                count,sum,avg,min,max

                ✅ Debugging
                toSql,logQuery

                ✅ Utility
                quoteIdentifier,createBindingKey

                ✅ Insert / Update / Delete
                insert,update,delete,truncate

You’ve already successfully tested all of the above in various chained or individual findAll() calls. Now, would you like me to start giving you compound test cases mixing multiple clauses (e.g., filter + group + having + paginate + sort) or focus on a specific type next? ​

3. Adding New Features in view pdf, export csv , import csv,bulk delete , bulk .


🔧 Prompt: Advanced Testing & Refactoring of CoreXPHP Framework Methods

I want you to act as a senior PHP framework architect and test engineer reviewing the CoreXPHP custom framework. Your goal is to deeply test, improve, and future-proof the framework’s core methods, especially:

✅ Target Areas:
1. QueryBuilder Class
CRUD: insert(), update(), delete(), truncate()

Filters: where, orWhere, whereIn, whereNotIn, whereBetween, whereNotBetween, whereNull, whereNotNull, whereRaw

Joins: join()

Groups: groupBy(), having()

Aggregation: count(), sum(), avg(), min(), max()

Selection: select(), selectRaw(), get(), first()

Pagination: paginate(), limit(), offset()

Debugging: toSql(), logQuery()

Utilities: quoteIdentifier(), createBindingKey()

2. Model Class
create(), update(), delete(), truncate()

find(), first(), all(), save()

Eager relationships (if implemented): belongsTo(), hasMany()

toArray(), toJson(), toSql()

🧪 Your Tasks:
Test and break each method with edge cases (e.g., missing fields, invalid joins, empty arrays, no primary key).

Refactor or propose better versions of each method with improved safety, performance, and readability.

Ensure all return types are chainable, consistent, and error-proof.

Suggest unit test structure or test case files per class method.

Optimize query building to avoid redundant logic (e.g., repeated WHERE, unsafe raw injections).



🔍 Format Expected:
✅ Test case scenario name

✅ Problem discovered (if any)

✅ Refactored/fixed method

✅ Reason for the improvement

✅ Example usage (before vs after)






Category,Function,Example
Filtering,where,"$model->findAll()->where('status', 'lost')->get();"
Filtering,orWhere,"$model->findAll()->where('status', 'lost')->orWhere('status', 'new')->get();"
Filtering,whereIn,"$model->findAll()->whereIn('status', ['lost', 'converted'])->get();"
Filtering,whereBetween,"$model->findAll()->whereBetween('leadId', [1, 10])->get();"
Filtering,whereNull,$model->findAll()->whereNull('email')->get();
Filtering,whereNotNull,$model->findAll()->whereNotNull('email')->get();
Filtering,whereRaw,"$model->findAll()->whereRaw('status = ""lost""')->get();"
Joins,join,"$model->findAll()->join('users', 'leads.userId', '=', 'users.id')->get();"
Group By,groupBy,"$model->findAll()->selectRaw('status, COUNT(*) as count')->groupBy('status')->get();"
Group By,having,"$model->findAll()->selectRaw('status, COUNT(*) as count')->groupBy('status')->having('count', '>', 1)->get();"
Ordering,orderBy,"$model->findAll()->orderBy('createdAt', 'desc')->get();"
Pagination,paginate,"$model->findAll()->paginate(1, 5)->get();"
Selection,select,"$model->findAll()->select(['name', 'email'])->get();"
Selection,first,"$model->findAll()->where('status', 'lost')->first();"
Selection,all,$model->all()->getAll();
Aggregation,count,"$model->findAll()->where('status', 'lost')->count();"
Aggregation,sum,"$model->findAll()->where('status', 'paid')->sum('amount');"
Aggregation,avg,$model->findAll()->avg('amount');
Aggregation,min,$model->findAll()->min('amount');
Aggregation,max,$model->findAll()->max('amount');
Debugging,toSql,"$model->findAll()->where('status', 'lost')->toSql();"
Debugging,logQuery,"$model->findAll()->where('status', 'lost')->logQuery();"
CRUD,insert,$model->insert([...]);
CRUD,create,$model->create([...]);
CRUD,find,$model->find(52);
CRUD,update,"$model->update([...], 52);"
CRUD,delete,$model->delete(52);
CRUD,truncate,$model->truncate();
CRUD,save,$model->fill([...])->save();


✅ MODEL CLASS — Supported Methods & Features
🔍 Query Methods
find($id) → Find by primary key.

find()->where(...)->first() → Find by custom column.

findAll(array $options) → Filtered, sorted, paginated query builder.

all() → Get all records (no filters).

first() → Return first matched record.

get() → Return all matched records.

✏️ Modification (CRUD)
create($data) → Insert new record.

update($data, $id = null) → Update by ID or where condition.

delete($id = null) → Delete by ID or where condition.

truncate() → Clear all data.

save() → Auto-create or update based on primary key in $attributes.

🧠 Conditions (Wrappers for QueryBuilder)
where($column, $operator, $value)

orWhere($column, $operator, $value)

whereIn($column, $values)

whereNull($column)

whereNotNull($column)

whereRaw($sql)

🧰 Utilities
select($columns)

orderBy($column, $direction)

limit($n)

offset($n)

paginate($page, $perPage)

count()

toSql() → SQL string

logQuery() → Log SQL to file

validate($data) → Run validation rules

fill($data) → Fill attributes

toArray() / toJson() → Serialization

🔗 Relationships
hasOne()

hasMany()

belongsTo()

belongsToMany()

morphMany()

morphTo()

✅ QUERYBUILDER CLASS — Supported Features
🔍 Conditions
where(), orWhere()

whereIn(), whereNotIn()

whereBetween(), whereNotBetween()

whereNull(), whereNotNull()

whereRaw()

🔢 Aggregates
count()

sum($column)

avg($column)

min($column)

max($column)

🔄 CRUD
insert($data)

update($data) → With where clause

delete() → With where clause

truncate()

📊 Selection & Fetching
select($columns)

selectRaw($sql)

first()

get()

toSql()

logQuery()

🧭 Pagination
paginate($page, $perPage)

limit($n)

offset($n)

🧩 Joins & Groups
join() (supports types)

groupBy()

having()

